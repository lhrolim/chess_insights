# Use Amazon Linux 2023 as the base image for the builder stage
FROM amazonlinux:2023 AS builder

# Install dependencies
RUN yum update -y && yum install -y git gcc-c++ make

# Clone the Stockfish repository
RUN git clone --depth 1 --branch sf_16.1 https://github.com/official-stockfish/Stockfish.git

# Set the working directory
WORKDIR /Stockfish/src

# Build Stockfish based on the detected architecture
RUN echo "arch:$( uname -m )" && case $( uname -m ) in \
  x86_64) \
    make build ARCH=x86-64-modern \
  ;; \
  aarch64) \
    make build ARCH=armv8 \
  ;; \
  armv7l) \
    make build ARCH=armv7 \
  ;; \
  ppc64le) \
    make build ARCH=ppc-64 \
  ;; \
  *) \
    exit 1 \
  ;; \
esac

# Use Amazon Linux 2023 as the base image for the final stage
FROM amazonlinux:2023

# Update package list
RUN yum update -y

# Install necessary packages
RUN yum install -y libstdc++ socat shadow-utils

# Add user and group
RUN groupadd -g 1000 stockfish && useradd -u 1000 -g stockfish -d /stockfish -m stockfish

# Set the working directory and switch to the stockfish user
WORKDIR /stockfish/
USER stockfish:stockfish

# Copy the built Stockfish binary and related files from the builder stage
COPY --chown=stockfish:stockfish --from=builder /Stockfish/src/stockfish /stockfish/
COPY --chown=stockfish:stockfish --from=builder /Stockfish/Copying.txt /stockfish/
COPY --chown=stockfish:stockfish --from=builder /Stockfish/src/*.nnue /stockfish/

# Expose the necessary port
EXPOSE 23249

# Set the entrypoint to run the Stockfish server using socat
ENTRYPOINT ["/bin/sh", "-c", "if [ -z \"$1\" ]; then echo 'Running socat...'; socat TCP4-LISTEN:23249,fork EXEC:/stockfish/stockfish; echo 'socat started'; else echo 'Running custom command: $@'; exec \"$@\"; fi"]
